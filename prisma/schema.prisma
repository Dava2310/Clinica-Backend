// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             Int            @id @default(autoincrement())
  cedula         String         @unique
  nombre         String         @db.VarChar(100)
  apellido       String         @db.VarChar(100)
  password       String         @db.VarChar(255)
  email          String         @unique @db.VarChar(100)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tokens         RefreshToken[]
  invalid_tokens InvalidToken[]

  // Tipos de Usuario
  tipoUsuario   String
  paciente      Paciente[]
  doctor        Doctor[]
  administrador Administrador[]
}

model RefreshToken {
  id           Int     @id @default(autoincrement())
  refreshToken String  @db.VarChar(255)
  userId       Int
  usuario      Usuario @relation(fields: [userId], references: [id])
}

model InvalidToken {
  id             Int     @id @default(autoincrement())
  expirationTime BigInt
  accessToken    String  @db.VarChar(255)
  userId         Int
  usuario        Usuario @relation(fields: [userId], references: [id])
}

model Paciente {
  id Int @id @default(autoincrement())

  // Datos del Paciente
  tipoSangre     String
  direccion      String
  numeroTelefono String
  seguroMedico   String

  historialMedico  HistorialMedico[]
  resumenesMedicos ResumenMedico[]
  citas            Cita[]

  userId  Int
  usuario Usuario @relation(fields: [userId], references: [id])
}

model Doctor {
  id Int @id @default(autoincrement())

  // Datos del Doctor
  especialidad   String
  numeroTelefono String

  resumenesMedicos ResumenMedico[]
  citas            Cita[]

  userId  Int
  usuario Usuario @relation(fields: [userId], references: [id])
}

model Administrador {
  id Int @id @default(autoincrement())

  userId  Int
  usuario Usuario @relation(fields: [userId], references: [id])
}

model HistorialMedico {
  id Int @id @default(autoincrement())

  // Datos del Historial Medico
  observaciones String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  pacienteId Int
  paciente   Paciente @relation(fields: [pacienteId], references: [id])

  resumenesMedicos ResumenMedico[]
}

model ResumenMedico {
  id Int @id @default(autoincrement())

  // Datos del Resumen Medico
  fecha         DateTime
  diagnostico   String
  tratamiento   String
  observaciones String
  tipoServicio  String

  // Relaciones
  doctorId Int
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  pacienteId Int
  paciente   Paciente @relation(fields: [pacienteId], references: [id])

  historialMedicoId Int
  historialMedico   HistorialMedico @relation(fields: [historialMedicoId], references: [id])
}

model Cita {
  id Int @id @default(autoincrement())

  idPaciente Int
  paciente   Paciente @relation(fields: [idPaciente], references: [id])

  idDoctor Int
  doctor   Doctor @relation(fields: [idDoctor], references: [id])

  // Datos de la cita
  tipoServicio  String
  fecha         DateTime
  estado        String // Solicitada, Aceptada, Rechazada
  observaciones String
}
